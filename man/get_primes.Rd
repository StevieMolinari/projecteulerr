% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_primes.R
\name{get_primes_up_to}
\alias{get_primes_up_to}
\alias{get_first_n_primes}
\alias{get_primes}
\title{Provides sequence of prime numbers}
\usage{
get_primes_up_to(bound)

get_first_n_primes(n)

get_primes(n, bound)
}
\arguments{
\item{bound}{the maximum value that the largest prime must not exceed}

\item{n}{the number of primes to return}
}
\value{
a numeric vector (of length n if \code{n} argument is provide) containing the prime numbers
}
\description{
Provides sequence of prime numbers
}
\section{May be useful for}{

\itemize{
\item Problem 7: 10001st prime
\item Problem 10: Summation of primes
}
}

\section{Details}{


The \code{get_primes_up_to()} function is employs the \href{https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes}{Sieve of Eratosthenes} algorithms.

The \code{get_first_n_primes()} function first finds an upper bound for the nth prime. Then it employs the \code{get_primes_up_to()} function with this bound and then returns the first n results. The bound calculation employs the \href{https://en.wikipedia.org/wiki/Prime_number_theorem}{Prime Number Theorem} which says the prime-counting function \eqn{\pi(N)} (the number of primes less than or equal to \eqn{N}) limits to \eqn{\frac{N}{\log{N}}}. This means there exists a constant \eqn{c} such that \eqn{\pi(N) \leq c \, \frac{N}{\log{N}}}. By inspection we find that:

\eqn{\underset{N \leq 10^8}{\mathrm{argmax}} \, \, \frac{\pi(N) \log{N}}{N} = 113}.

Therefore, by setting \eqn{c = \frac{30\log(113)}{113}} we satisfy the inequality \eqn{\pi(N) \leq c \frac{N}{\log{N}}} for all \eqn{N}.

Finally to find the value for the \code{bound} argument, we simple create a list of candidates bounds that are log linear from \eqn{10^2} to \eqn{10^8} and then check to see which of the "over-estimated" values \eqn{\hat{\pi}(N) = c \, \frac{N}{\log{N}}} are greater than the provided argument \code{n}.
}

\examples{
get_primes_up_to(100)

get_first_n_primes(20)

}
